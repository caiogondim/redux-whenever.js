const safeChain=require('safe-chain'),getStateSubtree=(a,b)=>{if(void 0!==a){if('string'==typeof b)return safeChain(a,b);if('function'==typeof b)return b(a);throw new TypeError('selector must be a string or function')}},conditionsAreMet=(a,b,c)=>b!==c&&('function'==typeof a?!!a(b):b===a),enhancer=(a)=>(b,c)=>{const d=a(b,c);let e,f;d.subscribe(()=>{e=f});const g=d.dispatch,h=[];let i=null,j=0;return d.whenever=(a,b,c)=>{const k=d.subscribe(()=>{++j,d.dispatch=function(){h.push(arguments)},f=d.getState();const g=getStateSubtree(f,a),i=getStateSubtree(e,a);conditionsAreMet(b,g,i)&&c(g,i),--j});return i&&i(),i=d.subscribe(()=>{if(0==j){j=void 0;for(let a=0;a<h.length;++a)g.apply(d,h[a]);h.length=0,d.dispatch=g,j=0}}),k},d};module.exports=enhancer;